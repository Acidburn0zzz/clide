//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Globalization;

namespace Clide.Properties
{
	///	<summary>
	///	Provides access to string resources.
	///	</summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	static partial class Strings
	{
		/// <summary>
		/// Looks up a localized string similar to: 
		///	Clide
		/// </summary>
		public static string OutputPaneTitle { get { return Resources.OutputPaneTitle; } }
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class CommandManager
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	In order to register command instance '{command}', it must have a [Command] attribute.
			/// </summary>
			public static string CommandAttributeMissing(object command)
			{
				return Resources.CommandManager_CommandAttributeMissing.FormatWith(new 
				{
					command = command,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	In order to register command filter instance '{filter}', it must have a [CommandFilter] attribute.
			/// </summary>
			public static string CommandFilterAttributeMissing(object filter)
			{
				return Resources.CommandManager_CommandFilterAttributeMissing.FormatWith(new 
				{
					filter = filter,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Command type '{type}' does not have the required attribute '{attribute}'.
			/// </summary>
			public static string OwningPackageAttributeRequired(object type, object attribute)
			{
				return Resources.CommandManager_OwningPackageAttributeRequired.FormatWith(new 
				{
					type = type,
					attribute = attribute,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Command type '{type}' specifies owning package with id '{packageId}' but it could not be found or loaded.
			/// </summary>
			public static string OwningPackageNotFound(object type, object packageId)
			{
				return Resources.CommandManager_OwningPackageNotFound.FormatWith(new 
				{
					type = type,
					packageId = packageId,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Command type '{type}' specifies owning package with id '{packageId}' which is not a valid service provider.
			/// </summary>
			public static string OwningPackageNotServiceProvider(object type, object packageId)
			{
				return Resources.CommandManager_OwningPackageNotServiceProvider.FormatWith(new 
				{
					type = type,
					packageId = packageId,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	In order to register all commands for a given package automatically, the owning package '{package}' must have a [Guid] attribute applied, which must match the commands' corresponding [Command] attribute.
			/// </summary>
			public static string PackageGuidMissing(object package)
			{
				return Resources.CommandManager_PackageGuidMissing.FormatWith(new 
				{
					package = package,
				});
			}
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class Diagnostics
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Failed to create output window for diagnostics traces.
			/// </summary>
			public static string FailedToCreateOutputWindow { get { return Resources.Diagnostics_FailedToCreateOutputWindow; } }
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class Hosting
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Unsupported Visual Studio version. Please update Clide.
			/// </summary>
			public static string UnsupportedRuntime { get { return Resources.Hosting_UnsupportedRuntime; } }
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class Host
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Failed to initialize host.
			/// </summary>
			public static string FailedToInitialize { get { return Resources.Host_FailedToInitialize; } }
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Hosting package '{0}' does not have the required [Guid] attribute.
			/// </summary>
			public static string MissingGuidAttribute(object arg0)
			{
				return Resources.Host_MissingGuidAttribute.FormatWith(new 
				{
					arg0 = arg0,
				});
			}
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class OptionsManager
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Failed to register page '{pageType}'.
			/// </summary>
			public static string FailedToRegisterPage(object pageType)
			{
				return Resources.OptionsManager_FailedToRegisterPage.FormatWith(new 
				{
					pageType = pageType,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	The owning package of a page must be a managed package, inheriting from '{managedPackageBaseType}'.
			/// </summary>
			public static string ManagedPackageRequired(object managedPackageBaseType)
			{
				return Resources.OptionsManager_ManagedPackageRequired.FormatWith(new 
				{
					managedPackageBaseType = managedPackageBaseType,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Options page specified package owner with Guid '{owningPackageGuid}', but the package could not be found or loaded.
			/// </summary>
			public static string OwningPackageNotFound(object owningPackageGuid)
			{
				return Resources.OptionsManager_OwningPackageNotFound.FormatWith(new 
				{
					owningPackageGuid = owningPackageGuid,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Options page of type '{pageType}' does not provide the required '{owningPackageAttributeType}' attribute.
			/// </summary>
			public static string OwningPackageRequired(object pageType, object owningPackageAttributeType)
			{
				return Resources.OptionsManager_OwningPackageRequired.FormatWith(new 
				{
					pageType = pageType,
					owningPackageAttributeType = owningPackageAttributeType,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Options page '{pageType}' must have a Category attribute that specifies the name of the root category node this page shows under in the Tools | Options dialog.
			/// </summary>
			public static string PageCategoryRequired(object pageType)
			{
				return Resources.OptionsManager_PageCategoryRequired.FormatWith(new 
				{
					pageType = pageType,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Options page '{pageType}' must have a DisplayName attribute that determines the name of the node under the specified category in the Tools | Options dialog tree.
			/// </summary>
			public static string PageDisplayNameRequired(object pageType)
			{
				return Resources.OptionsManager_PageDisplayNameRequired.FormatWith(new 
				{
					pageType = pageType,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Tools options pages are not supported in this version of Visual Studio.
			/// </summary>
			public static string Unsupported { get { return Resources.OptionsManager_Unsupported; } }
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class SettingsManager
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Cannot persist setting value of type '{0}' from property '{1}.{2}'. An appropriate type converter that can convert the value to a string is required.
			/// </summary>
			public static string CannotSaveAsString(object arg0, object arg1, object arg2)
			{
				return Resources.SettingsManager_CannotSaveAsString.FormatWith(new 
				{
					arg0 = arg0,
					arg1 = arg1,
					arg2 = arg2,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Failed to read settings class '{0}' from the settings store.
			/// </summary>
			public static string FailedToRead(object arg0)
			{
				return Resources.SettingsManager_FailedToRead.FormatWith(new 
				{
					arg0 = arg0,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Cannot assign value of type '{0}' to property '{1}.{2}' of type '{3}'. An appropriate type converter is required.
			/// </summary>
			public static string InvalidValue(object arg0, object arg1, object arg2, object arg3)
			{
				return Resources.SettingsManager_InvalidValue.FormatWith(new 
				{
					arg0 = arg0,
					arg1 = arg1,
					arg2 = arg2,
					arg3 = arg3,
				});
			}
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class Settings
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Object has already been initialized.
			/// </summary>
			public static string AlreadyInitialized { get { return Resources.Settings_AlreadyInitialized; } }
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	EndEdit invoked without corresponding BeginEdit.
			/// </summary>
			public static string EndEditWithoutBeginEdit { get { return Resources.Settings_EndEditWithoutBeginEdit; } }
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	EndInit invoked without corresponding BeginInit.
			/// </summary>
			public static string EndInitWithoutBeginInit { get { return Resources.Settings_EndInitWithoutBeginInit; } }
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Failed to restore original state when editing was cancelled.
			/// </summary>
			public static string FailedToRestore { get { return Resources.Settings_FailedToRestore; } }
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Settings successfully saved.
			/// </summary>
			public static string TraceSaved { get { return Resources.Settings_TraceSaved; } }
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class SolutionNode
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	The solution file is invalid.
			/// </summary>
			public static string InvalidSolutionFile { get { return Resources.SolutionNode_InvalidSolutionFile; } }
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class VsCommandExtensionAdapter
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Attempted to execute command '{commandText}' ({commandType}) but current command status does not allow it.
			/// </summary>
			public static string CannotExecute(object commandText, object commandType)
			{
				return Resources.VsCommandExtensionAdapter_CannotExecute.FormatWith(new 
				{
					commandText = commandText,
					commandType = commandType,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Command did not execute successfully due to an unexpected exception. Please check the output window for additional information.
			/// </summary>
			public static string ExecuteShieldMessage { get { return Resources.VsCommandExtensionAdapter_ExecuteShieldMessage; } }
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Executing command '{commandText}' ({commandType}).
			/// </summary>
			public static string ExecutingCommand(object commandText, object commandType)
			{
				return Resources.VsCommandExtensionAdapter_ExecutingCommand.FormatWith(new 
				{
					commandText = commandText,
					commandType = commandType,
				});
			}
		
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Command could not determine its current status due to an unexpected exception. Please check the output window for additional information.
			/// </summary>
			public static string QueryStatusShieldMessage { get { return Resources.VsCommandExtensionAdapter_QueryStatusShieldMessage; } }
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class ConfigProjectProperties
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Project '{projectFile}' must be based on MSBuild in order to support dynamic properties.
			/// </summary>
			public static string UnsupportedProject(object projectFile)
			{
				return Resources.ConfigProjectProperties_UnsupportedProject.FormatWith(new 
				{
					projectFile = projectFile,
				});
			}
		}
		
		///	<summary>
		///	Provides access to string resources.
		///	</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("netfx-System.Strings", "1.0.0.0")]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
		public static partial class SolutionTreeNode
		{
			/// <summary>
			/// Looks up a localized string similar to: 
			///	Selecting element '{itemPath}' is not supported by the underlying project type.
			/// </summary>
			public static string SelectionUnsupported(object itemPath)
			{
				return Resources.SolutionTreeNode_SelectionUnsupported.FormatWith(new 
				{
					itemPath = itemPath,
				});
			}
		}
	}
}

